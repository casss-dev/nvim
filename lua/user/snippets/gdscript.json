{
	"Variable": {
		"scope": "gdscript",
		"prefix": "va",
		"body": [
			"var $1 :$2= $3"
		],
		"description": "Creates a variable"
	},
	"Function": {
		"scope": "gdscript",
		"prefix": "fu",
		"body": [
			"func $1($2) -> ${3:void}:",
			"\t${4:pass}"
		],
		"description": "Adds dependencies export category"
	},
	"Lambda": {
		"scope": "gdscript",
		"prefix": "lm",
		"body": [
			"var ${1:lambda} = func (${2:params}): ${3:return}$0"
		],
		"description": "Adds dependencies export category"
	},
	"Dependencies": {
		"scope": "gdscript",
		"prefix": "edeps",
		"body": [
			"@export_category(\"Dependencies\")"
		],
		"description": "Adds dependencies export category"
	},
	"Parameters": {
		"scope": "gdscript",
		"prefix": "eparms",
		"body": [
			"@export_category(\"Parameters\")"
		],
		"description": "Adds dependencies export category"
	},
	"Log level": {
		"scope": "gdscript",
		"prefix": "elog",
		"body": [
			"@export_category(\"Debug\")",
			"@export",
			"var log_level := Logger.LevelGroup.VERBOSE",
			"",
			"@onready",
			"var logger := Logger.new(self)"
		],
		"description": "Adds debug logger"
	},
	"Chance": {
		"scope": "gdscript",
		"prefix": "echance",
		"body": [
			"@export_range(0, 1)",
			"var $1_chance: float = 0"
		],
		"description": "Adds debug logger"
	},
	"Setter": {
		"scope": "gdscript",
		"prefix": "vset",
		"body": [
			"var $1 := $2:",
			"\tset(value):",
			"\t\t$1 = value",
			"\t\t$0"
		],
		"description": "Adds debug logger"
	},
	"Codeblock comment": {
		"scope": "gdscript",
		"prefix": "codebl",
		"body": [
			"## [br]",
			"## [codeblock]",
			"## $0",
			"## [/codeblock]"
		],
		"description": "Adds a codeblock comment"
	},
	"String interpolation": {
		"scope": "gdscript",
		"prefix": "\"\"",
		"body": [
			"\"$1\" % [$2]$0"
		],
		"description": "Adds a codeblock comment"
	},
	"Deprecate": {
		"scope": "gdscript",
		"prefix": "depr",
		"body": [
			"## @deprecated(\"Use ${1:new_func} instead\")"
		],
		"description": "Adds a deprecation comment"
	},
	"Ready func": {
		"scope": "gdscript",
		"prefix": "rd",
		"body": [
			"func _ready() -> void:",
			"\t${1:pass}"
		],
		"description": "Adds a codeblock comment"
	},
	"Null check": {
		"scope": "gdscript",
		"prefix": "ifn",
		"body": [
			"if $1 == null",
			"\t${2:return}"
		],
		"description": "Adds a null check"
	},
	"Connect signal": {
		"scope": "gdscript",
		"prefix": "connect",
		"body": [
			"${1:signal_emitter}.${2:signal_callback}.connect(_on_${2:signal_callback})",
			"func _on_${2:signal_callback}(${3:params}) -> void:",
			"\tpass$0"
		],
		"description": "Adds a null check"
	},
	"State chart expression": {
		"scope": "gdscript",
		"prefix": "expp",
		"body": [
			"var ${1:property}: ${2:type}:",
			"\tget:",
			"\t\treturn get_expression_property(\"${1:property}\", ${3:default})",
			"\tset(value):",
			"\t\tset_expression_property(\"${1:property}\", value)"
		],
		"description": "Adds a typed expression property"
	}
}
