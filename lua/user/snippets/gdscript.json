{
	"Variable": {
		"scope": "gdscript",
		"prefix": "va",
		"body": [
			"var $1 :$2= $3"
		],
		"description": "Creates a variable"
	},
	"Function": {
		"scope": "gdscript",
		"prefix": "fu",
		"body": [
			"func $1($2) -> ${3:void}:",
			"\t${4:pass}"
		],
		"description": "Adds dependencies export category"
	},
	"Lambda": {
		"scope": "gdscript",
		"prefix": "la",
		"body": [
			"var ${1:lambda} = func (${2:params}): ${3:return}$0"
		],
		"description": "Adds dependencies export category"
	},
	"Export": {
		"scope": "gdscript",
		"prefix": "e",
		"body": [
			"@export var ${1:name}: ${2:type}"
		],
		"description": "Creates an export variable"
	},
	"Export category": {
		"scope": "gdscript",
		"prefix": "cat",
		"body": [
			"@export_category(\"${1:name}\")"
		],
		"description": "Adds an export category"
	},
	"Log level": {
		"scope": "gdscript",
		"prefix": "elog",
		"body": [
			"@export_category(\"Debug\")",
			"@export",
			"var log_level := Logger.LevelGroup.VERBOSE",
			"",
			"@onready",
			"var logger := Logger.new(self)"
		],
		"description": "Adds debug logger"
	},
	"Setter": {
		"scope": "gdscript",
		"prefix": "set",
		"body": [
			"var $1 := $2:",
			"\tset(value):",
			"\t\t$1 = value",
			"\t\t$0"
		],
		"description": "Adds debug logger"
	},
	"Codeblock comment": {
		"scope": "gdscript",
		"prefix": "codebl",
		"body": [
			"## [br]",
			"## [codeblock]",
			"## $0",
			"## [/codeblock]"
		],
		"description": "Adds a codeblock comment"
	},
	"String interpolation": {
		"scope": "gdscript",
		"prefix": "\"\"",
		"body": [
			"\"$1\" % [$2]$0"
		],
		"description": "Adds a codeblock comment"
	},
	"Deprecate": {
		"scope": "gdscript",
		"prefix": "depr",
		"body": [
			"## @deprecated(\"Use ${1:new_func} instead\")"
		],
		"description": "Adds a deprecation comment"
	},
	"Ready func": {
		"scope": "gdscript",
		"prefix": "rr",
		"body": [
			"func _ready() -> void:",
			"\t${1:pass}"
		],
		"description": "Adds a codeblock comment"
	},
	"Null check": {
		"scope": "gdscript",
		"prefix": "ifn",
		"body": [
			"if not $1:",
			"\t${2:return}"
		],
		"description": "Adds a null check"
	},
	"Connect signal": {
		"scope": "gdscript",
		"prefix": "conn",
		"body": [
			"\t${1:signal_emitter}.${2:signal_callback}.connect(_on_${2:signal_callback})",
			"func _on_${2:signal_callback}(${3:params}) -> void:",
			"\tpass$0"
		],
		"description": "Adds a null check"
	},
	"State chart expression": {
		"scope": "gdscript",
		"prefix": "expp",
		"body": [
			"var ${1:property}: ${2:type}:",
			"\tget:",
			"\t\treturn get_expression_property(\"${1:property}\", ${3:default})",
			"\tset(value):",
			"\t\tset_expression_property(\"${1:property}\", value)"
		],
		"description": "Adds a typed expression property"
	},
	"Mark": {
		"scope": "gdscript",
		"prefix": "mark",
		"body": "# MARK: $0",
		"description": "Creates a mark"
	},
	"Fix me": {
		"scope": "gdscript",
		"prefix": "fix",
		"body": "# FIXME: $0",
		"description": "Creates a fix me"
	},
	"Todo": {
		"scope": "gdscript",
		"prefix": "todo",
		"body": "# TODO: $0",
		"description": "Creates a todo"
	},
	"Note": {
		"scope": "gdscript",
		"prefix": "note",
		"body": "# NOTE: $0",
		"description": "Creates a note"
	},
	"Box": {
		"scope": "gdscript",
		"prefix": "box",
		"body": [
			"#################",
			"## $1 ##",
			"#################",
			"$0"
		],
		"description": "Creates a box"
	},
	"Instantiate": {
		"scope": "gdscript",
		"prefix": "inst",
		"body": [
			"## The associated scene for this script",
			"const SCENE = preload(${1:resource_path})",
			"## Creates an instance of `${2:type}`",
			"static func instantiate() -> ${2:type}:",
			"\treturn SCENE.instantiate()$0"
		],
		"description": "Adds a static instantiate function"
	},
	"Test": {
		"description": "Creates a new test method",
		"scope": "gdscript",
		"prefix": "test",
		"body": [
			"func test_${1:name}():",
			"\t# given",
			"\t$2",
			"\t# when",
			"\t$3",
			"\t# then",
			"\t$4"
		]
	},
	"Editor Description": {
		"description": "Creates an editor description",
		"scope": "gdscript",
		"prefix": "desc",
		"body": [
			"const EDITOR_DESCRIPTION = \"\"\"",
			"$1",
			"\"\"\"",
			"",
			"func _enter_tree() -> void:",
			"\tif Engine.is_editor_hint():",
			"\t\teditor_description = EDITOR_DESCRIPTION.strip_edges()",
			"\t\treturn"
		]
	},
	"Save and Load": {
		"description": "Adds handling for saving and loading a node",
		"scope": "gdscript",
		"prefix": "save",
		"body": [
			"@onready var _save_events := SaveEventBus.get_instance()",
			"",
			"func _ready() -> void:",
			"\t_save_events.save.connect(_on_save)",
			"\t_save_events.load.connect(_on_load_game)",
			"func _on_save(game: SavedGame) -> void:",
			"\t${1:pass}",
			"func _on_load_game(game: SavedGame) -> void:",
			"\t${2:pass}"
		]
	}
}
